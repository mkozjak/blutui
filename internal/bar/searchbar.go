package bar

import (
	"slices"
	"strings"

	"github.com/gdamore/tcell/v2"
	"github.com/mkozjak/blutui/internal"
	"github.com/mkozjak/blutui/internal/library"
	"github.com/mkozjak/tview"
)

// A SearchBar is a [Bar] component that provides fuzzy search capability for artists.
// It is shown on Bar when called via the forward-slash keyboard key by default.
type SearchBar struct {
	// The following fields hold interfaces that are used for communicating with
	// [Bar] and library instances.
	app      appManager
	switcher switcher
	libs     map[string]library.ArtistFilter

	// A tview-specific widget that provides query input to the user in order
	// to initiate an artist fuzzy search feature.
	container *tview.InputField
}

// newSearchBar returns a new [SearchBar] given its dependencies switcher and library instances
// SearchBar is then used for the creation of a container, tview.InputField, that is
// directly used by the app to focus the search input field.
func newSearchBar(a appManager, s switcher, l map[string]library.ArtistFilter) *SearchBar {
	return &SearchBar{app: a, switcher: s, libs: l}
}

// createContainer creates a [SearchBar] container returning a pointer to
// tview's InputField type, that is directly used by app in order to turn on
// the search bar on [Bar] to start user's query.
//
// Input is automatically prefixed with the string "search: " followed by
// user's input. The user can either confirm their query pressing the Enter key
// or cancel input by pressing the Escape key on the keyboard.
func (s *SearchBar) createContainer() *tview.InputField {
	s.container = tview.NewInputField().
		SetLabel("search: ").
		SetLabelColor(tcell.ColorDefault).
		SetFieldBackgroundColor(tcell.ColorDefault).
		SetFieldTextColor(tcell.ColorDefault).
		SetAcceptanceFunc(tview.InputFieldMaxLength(40)).
		SetDoneFunc(s.done)

	s.container.SetBackgroundColor(tcell.ColorDefault).
		SetTitleColor(tcell.ColorDefault).
		SetBorderPadding(0, 0, 1, 1)

	return s.container
}

// done is a callback method that gets called after the user confirms their
// search query pressing one of the Enter or Escape keys on the keyboard.
// In case when Enter is pressed, the program fetches user's input and also
// prepares tokens that are generated by splitting currently iterated artist name by
// whitespace (" "). These tokens, along with the query, are then each sent as
// input to [internal.JWSimilarity], that is the Jaro-Winkler Distance metric implementation.
// A result that has a better JW score is then chosen for that artist.
// A method then calls [library.FilterArtistPane] that redraws Artist Pane with
// search results, or matched artists.
// In case when Escape is pressed, this method just resets the Search Bar input and
// shows the Status Bar component.
//
// This method is used by tview.InputField.SetDoneFunc method in [createContainer].
func (s *SearchBar) done(key tcell.Key) {
	switch key {
	case tcell.KeyEnter:
		a := s.libs[s.app.CurrentPage()].Artists()
		query := s.container.GetText()
		var m []string

		for i := 0; i < len(a); i++ {
			var scores []float64

			for _, token := range strings.Split(a[i], " ") {
				scores = append(scores, internal.JWSimilarity(query, token))
			}

			score := slices.Max(scores)
			if score == 1 {
				// Exact match
				m = []string{a[i]}
				break
			} else if score > 0.75 {
				m = append(m, a[i])
			}
		}

		if len(m) > 0 {
			s.libs[s.app.CurrentPage()].FilterArtistPane(m)
		}

		s.container.SetText("")
		s.switcher.Show("status")
	case tcell.KeyEscape:
		s.container.SetText("")
		s.switcher.Show("status")
	}
}
